

DECLARACION DEL PROYECTO:
	
	<project name="BlaBlaKid" basedir="." default="todo">//nombre para usar en el proyecto, directorio base y accion a relizar por defecto
		Se declara un proyencto que tiene un numbre, un directoiro base y una accion por defecto para hacer que en este caso es todo(etiqueta de abajo del todo)
	
DIRECTORIOS DE ORIGEN Y DE DESTINO:
	
	
	
    <property name="src" value="./src"/> //el name puede ser src o pepe o loq ue ssea que cuando haga referencia a el vale src
    <property name="test" value="./test"/>
    <property name="lib" value="./lib/junit-4.8.2.jar"/>//para inluir el junit
    <property name="classes" value="./classes"/>
	<property name="docs" value="./docs"/>
	<property name="logs" value="./logs"/>

    <property name="paquetes" value="es.unileon.prg1.blablakid"/> //el pauqete
    <property name="titulo" value="Practica obligatoria blablakid"/>

OBJETIVOS O TAREAS QUE VA A REALIZAR:

	-Limpiar
		
    <target name="clean"> //borra las cosas que va a generar de nuevo para que no se sobreescirban
      <delete dir="${classes}"/> con ${} llamas arriba, si pusieies peep miraria que valor tien que es src
	  <delete dir="${docs}"/> delete es lo que quiero que me borre
	  <delete dir="${logs}"/> //quitar poque para que lo creas? 
    </target>



	-Compilar

    <target name="compile" depends="clean"> //la siguiente tarea es compilar; ya van dependiendo de las anteriores
      <mkdir dir="${classes}"/> //crea el directorio clases y el de los log
	  <mkdir dir="${logs}"/> //crea clases y logs
      <javac srcdir="${src}" destdir="${classes}" includeantruntime="false"> //srcdir de donde lo coge y el otro destdir donde lo deja (el include ant runtime ? )
		<classpath>
			<pathelement path="lib/junit-4.8.2.jar"/> //se pueden declarar arriba con el valor anterior (-----.jar) y aqui llamar solo, el classpath es lo que le dice a lo de compilar cuadno entre a ejecutar una clase y tope con ls import a ver a donde leches ha de ir a buscarlos
			<pathelement path="lib/log4j-api-2.5.jar"/>
			<pathelement path="lib/log4j-core-2.5.jar"/>
		</classpath>
	  </javac>
      <echo message="Compilation...done"/>
    </target>//acabo la tarea de compilar
	
	
	
						
						-Compilar los Test
						
						<target name="compileTests" depends="compile">  //compila los test
						  <mkdir dir="${classes}"/> //si en compile ya creamos la carpeta pues que demonios creamos otra vez la misma
						  <javac srcdir="${test}" destdir="${classes}" classpath="${lib}" //COMO SOLO SE COMPILAN LOS TEST SOLO LE VA A HACER FALTA LA LIBRERIA DEL JUNIT //srcdir lo cogemos de aqui lo dejamos en destdir classes y classpath es donde ha de ir a buscar para que org junit assert no de error
							includeantruntime="false"/> //fijate que aqui cierra el javac porque no va a poner varios classpath
						  <echo message="Test compilation...done"/>
						</target>
						
						
						
						
						-Ejecutar los Test

						<target name="test" depends="compileTests">//test depende de compiletest luego si no funciona compiletest este menos
							<java classname="org.junit.runner.JUnitCore"> //es igual que cuando ejecuto por la linea de comandos, se ejecuta el paquete (de los test en este caso)
								<classpath>
									<pathelement path="${classes}"/> //las necesita porque ahi es donde se compila todo, entonces necesito ir a clases a coger las cosas compiladas
									<pathelement path="lib/junit-4.8.2.jar"/>
									<pathelement path="etc/testlogs/"/> //es el fichero log4j2 
									<pathelement path="lib/log4j-api-2.5.jar"/>
									<pathelement path="lib/log4j-core-2.5.jar"/>
								</classpath>
								<arg value="es.unileon.prg1.blablakid.AllTests"/> //Se le pasa un argumento al ejecutar para que lance todos los test
							</java>
						</target>
						
						
	
	
	
	-Generar la documentacion
	
	<target name="javadoc" depends="clean"> //hacer la documentacion
      <mkdir dir="${docs}"/> //se crea la carpeta doc
      <javadoc access ="private" author ="true"  destdir="${docs}" sourcepath="${src}" version ="true">
		<classpath>
              <pathelement path="${classes}"/>  //si necesitase buscar algo iría a estas rutas, pero como para generar la documentacion no necesita nada en realidad solamente habría que poner los log para que no proteste
			  <pathelement path="${lib}"/>
			  <pathelement path="etc/"/>	
			  <pathelement path="lib/junit-4.8.2.jar"/>  //poner los log para que no de guerra
			  <pathelement path="lib/log4j-api-2.5.jar"/>
			  <pathelement path="lib/log4j-core-2.5.jar"/>
         </classpath>
	  </javadoc>
      <echo message="Generating documentation...done"/>
    </target>





	-Ejecutar la aplicacion


    <target name="run" depends="compile"> /si no compila no ejecuta
      <java classname="es.unileon.prg1.blablakid.BlaBlaKidMain"> //direccion a la que ir para ejecutar
	  <arg value="3"/> //lo que se pone para que se pueda introducir por el main los argumentos
         <classpath>
              <pathelement path="${classes}"/>
			  <pathelement path="${lib}"/>
			  <pathelement path="etc/"/>//el fichero de logs de la app; el normal
			  <pathelement path="lib/junit-4.8.2.jar"/>
			  <pathelement path="lib/log4j-api-2.5.jar"/>
    	//se pone un "." para el archivo de log4 java, se llama a todo, es decir sube arrib ay en basedir en las declaraciones es a lo que se refiere
			  <pathelement path="lib/log4j-core-2.5.jar"/>
         </classpath>
		  
      </java>
    </target>



OBJETIVO GLOBAL (detemina el orden de ejecucion de las tareas)

    <target name="todo" depends="compile,javadoc, test, run"/> //run es lo ultimo que hace primero todo lo de antes; haz todo y lo ultimo que hace es ejecutar


</project> //se termina el project